input{
	kafka{
		bootstrap_servers=>["172.31.20.219:9092,172.31.26.255:9092,172.31.22.19:9092"]
		group_id=>"logstash"
		auto_offset_reset=>"earliest"
		consumer_threads=>3
		topics=>["sbs_imp_log","sbs_click_log"]
		}
}
filter{
	mutate{
		gsub=>["message","=","&"]
		split=>["message","&"]
		add_field=>{"%{[message][0]}"=>"%{[message][1]}"}
		add_field=>{"%{[message][2]}"=>"%{[message][3]}"}
		add_field=>{"%{[message][4]}"=>"%{[message][5]}"}
		add_field=>{"%{[message][6]}"=>"%{[message][7]}"}
		add_field=>{"%{[message][8]}"=>"%{[message][9]}"}
		add_field=>{"%{[message][10]}"=>"%{[message][11]}"}
		add_field=>{"%{[message][12]}"=>"%{[message][13]}"}
		add_field=>{"%{[message][14]}"=>"%{[message][15]}"}
		add_field=>{"%{[message][16]}"=>"%{[message][17]}"}
		add_field=>{"%{[message][18]}"=>"%{[message][19]}"}
		add_field=>{"%{[message][20]}"=>"%{[message][21]}"}
		add_field=>{"%{[message][22]}"=>"%{[message][23]}"}
		add_field=>{"%{[message][24]}"=>"%{[message][25]}"}
		add_field=>{"%{[message][26]}"=>"%{[message][27]}"}
		add_field=>{"%{[message][28]}"=>"%{[message][29]}"}
		add_field=>{"%{[message][30]}"=>"%{[message][31]}"}
		add_field=>{"%{[message][32]}"=>"%{[message][33]}"}
		add_field=>{"%{[message][34]}"=>"%{[message][35]}"}
		add_field=>{"%{[message][36]}"=>"%{[message][37]}"}
				}
	ruby{
		code=>"
			begin
				time_slot=event.get('@timestamp').time.getlocal('+08:00').strftime('%Y%m%d%H')
				event.set('time_slot',time_slot)
				result =event.get('time_slot')+'	'+ event.get('ad_id')+'	'+event.get('ad_type')+'	'+event.get('adx')+'	'+event.get('campaign')+'	'+event.get('device_id')+'	'+event.get('e')+'	'+event.get('imp_id')+'	'+event.get('landing_page_id')+'	'+event.get('media_id')+'	'+event.get('platform')+'	'+event.get('price')+'	'+event.get('rts')+'	'+event.get('slot_id')+'	'+event.get('ab')+'	'+event.get('template_id')+'	'+event.get('time_stamp')+'	'+event.get('user_id')+'	'+event.get('wechat')
				event.set('message',result)
				event.set('success','true')
			rescue
				event.set('success','false')
			end
		"
	}

	mutate{
		remove_field=>["ad_id","ad_type","adx","campaign","device_id","e","imp_id","landing_page_id","media_id","platform","price","rts","slot_id","ab","template_id","tme_stamp","user_id","wechat","@version","date","time_stamp"]
	}}
output{
	if [success]=='false'{
		s3{
			access_key_id => ""
			secret_access_key => ""
			region => "cn-north-1"
			prefix => "realtime_data/sbs_imp/error/pdate=%{time_slot}/"
			bucket => "dsp-service"
			#codec => line{format=>"%{message}"}
			time_file => 3
			size_file => 20480
		}
	}
	if [success] =='true'{
		s3{
			access_key_id => ""
			secret_access_key => ""
			region => "cn-north-1"
			prefix => "realtime_data/sbs_imp/success/pdate=%{time_slot}/"
			bucket => "dsp-service"
			# 默认s3上生成的内容每行都会有%{host} 加上以下代码可以指定只显示message内容
			codec => line{format=>"%{message}"}
			# 时间和大小控制新文件产生
			time_file => 3
			size_file => 20480
		}
	}
}


# 要处理的日志样式为
# ad_id=52648&ad_type=3&adx=adspool&campaign=18338&date=2020-09-09&device_id=07c98fc083f36123&e=106&imp_id=531024645264830&landing_page_id=20200901717&media_id=30&platform=2&price=1.80&rts=1599644156&slot_id=62891042&t=0&template_id=5&time_stamp=1599644109&user_id=173&wechat=iyunyao